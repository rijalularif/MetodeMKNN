# -*- coding: utf-8 -*-
"""knn_fix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LG2MwOew7m5esXij6vPKlBA6uOfU6OiC
"""

import pandas as pd

data = pd.read_csv("data_pasien.csv")
data.head()

import matplotlib.pyplot as plt

fig, ax = plt.subplots()
for jk, d in data.groupby('jk'):
  ax. scatter(d['usia'], d['kode'], label=jk)

plt.legend(loc='upper left')
plt.title('Sebaran Data Usia, Kode, Jenis Kelamin')
plt.xlabel('Usia (tahun)')
plt.ylabel('Kode (kd)')
plt.grid(True)
plt.show()

import numpy as np

X_train = np.array(data[['usia', 'kode']])
y_train = np.array(data['jk'])

print(f'X_train:\n{X_train}\n')
print(f'y_train: {y_train}')

from sklearn.preprocessing import LabelBinarizer

lb = LabelBinarizer()
y_train = lb.fit_transform(y_train)
print(f'y_train:\n{y_train}')

y_train = y_train.flatten()
print(f'y_train: {y_train}')

from sklearn.neighbors import KNeighborsClassifier

K = 3
model = KNeighborsClassifier (n_neighbors=K)
model.fit(X_train, y_train)

usia = 50
kode = 23
X_new = np.array([usia, kode]).reshape(1, -1)
X_new

y_new = model.predict(X_new)
y_new

lb.inverse_transform(y_new)

fig, ax = plt.subplots()
for jk, d in data.groupby('jk'):
  ax. scatter(d['usia'], d['kode'], label=jk)

plt.scatter (usia, 
             kode,
             marker='s',
             color='red',
             label='misterius')
plt.legend(loc='upper left')
plt.title('Sebaran Data Usia, Kode, Jenis Kelamin')
plt.xlabel('Usia (tahun)')
plt.ylabel('Kode (kd)')
plt.grid(True)
plt.show()

misterius = np.array([usia, kode])
misterius

X_train

from scipy.spatial.distance import euclidean

data_jarak = [euclidean(misterius, d) for d in X_train]
data_jarak

data['jarak'] = data_jarak
data.sort_values(['jarak'])

X_test = np.array([[52, 21], [79,21], [62,23], [63,22], [44,23], [71,22]])
y_test = lb.fit_transform(np.array(['wanita', 'wanita', 'pria', 'pria', 'wanita', 'wanita'])).flatten()

print(f'X_test:\n{X_test}\n')

y_pred = model.predict(X_test)
y_pred

from sklearn.metrics import accuracy_score

acc = accuracy_score(y_test, y_pred)

print(f'Accuracy: {acc}')

from sklearn.metrics import recall_score

rec = recall_score(y_test, y_pred)

print(f'Recall: {rec}')

from sklearn.metrics import f1_score

f1 = f1_score(y_test, y_pred)

print(f'F1-score: {f1}')

from sklearn.metrics import matthews_corrcoef
mcc = matthews_corrcoef(y_test, y_pred)

print(f'MCC: {mcc}')

